{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAEhCC,EAAa,CACjBC,MAAO,KACPC,KAAM,KACNC,OAAQ,MAGVN,EAAOO,iBAAiB,UAOxB,SAAsBC,G,kBAYtBC,YAAW,YAyBX,SAAuBC,EAAUN,GAC7B,IAAMO,EAAgBC,KAAKC,SAAW,GAStC,OARgB,IAAIC,SAAQ,SAACC,EAAKC,GAC5BL,EACJI,EAAI,CAACL,WAAUN,UAEfY,EAAI,CAACN,WAAUN,S,KA9BrBa,CAAcP,SAAUN,OACvBc,MAAK,SAAAC,G,IAAGC,EAAQD,EAART,SAAUW,EAAKF,EAALf,MACjBgB,EAAWE,EAAI,EAEbD,EADQ,IAANC,EACMC,EAEAA,EAAeC,EAAkBF,EAEnCxB,EAAA2B,OAAOC,QAAQ,uBAAwCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IAEtEO,OAAM,SAAAT,G,IAAGC,EAAQD,EAART,SAAUW,EAAKF,EAALf,MAClBgB,EAAWE,EAAI,EAEbD,EADQ,IAANC,EACMC,EAEAA,EAAeC,EAAkBF,EAEnCxB,EAAA2B,OAAOI,QAAQ,sBAAqCF,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,MAE5DE,EAAeC,EAAkBF,E,EA/BvCd,EAAIsB,iBAOJ,IALA,IAAMP,EAAepB,EAAWC,MAC5BoB,EAAkBrB,EAAWE,KAC3B0B,EAAa5B,EAAWG,OAGrB0B,EAAI,EAAGA,EAAID,EAAYC,GAAG,EAACC,EAAAD,E,IAdtChC,EAAOO,iBAAiB,SAExB,SAAuBC,GACrBL,EAAWK,EAAI0B,OAAOC,MAAQC,OAAO5B,EAAI0B,OAAOG,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nconst formValues = {\n  delay: null,\n  step: null,\n  amount: null,\n}\n\nformEl.addEventListener('submit', startMassage);\nformEl.addEventListener('input', addFormValues);\n\nfunction addFormValues(evt) {\n  formValues[evt.target.name] = Number(evt.target.value);\n}\n\nfunction startMassage(evt) {\n  evt.preventDefault();\n\n  const firstTimeout = formValues.delay;\n  let intervalTimeout = formValues.step;\n  const amountStep = formValues.amount;\n  \n\n  for (let i = 0; i < amountStep; i+=1) {\n\n   \n    \nsetTimeout(() => {\ncreatePromise(position, delay)\n.then(({ position, delay }) => {\n  position = i + 1;\n  if (i === 0) {\n    delay = firstTimeout;\n  } else {\n    delay = firstTimeout + intervalTimeout * i;\n  }\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n.catch(({ position, delay }) => {\n  position = i + 1;\n  if (i === 0) {\n    delay = firstTimeout;\n  } else {\n    delay = firstTimeout + intervalTimeout * i;\n  }\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n     }, firstTimeout + intervalTimeout * i);\n  }\n}\n  \n\nfunction createPromise(position, delay) { \n    const shouldResolve = Math.random() > 0.3;\n    const promise = new Promise((res, rej) => {\n      if (shouldResolve) {\n      res({position, delay});\n    } else {\n      rej({position, delay});\n    }\n  });\n    \n    return promise;\n  }"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$formValues","delay","step","amount","addEventListener","evt","setTimeout","position","shouldResolve","Math","random","Promise","res","rej","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","i","firstTimeout","intervalTimeout","Notify","success","concat","catch","failure","preventDefault","amountStep","i1","_loop","target","name","Number","value"],"version":3,"file":"03-promises.cfa16f92.js.map"}