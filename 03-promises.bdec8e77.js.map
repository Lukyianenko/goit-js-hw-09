{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAEhCC,EAAa,CACjBC,MAAO,KACPC,KAAM,KACNC,OAAQ,MAGVN,EAAOO,iBAAiB,UAOxB,SAAsBC,G,kBAUlB,IAAIC,EAAWC,EAAI,EACfC,EAAQC,EAAeC,EAAkBH,EAIjDI,YAAW,WAaX,IAAuBC,EAAUX,EACvBY,GADaD,EAZTN,EAYmBL,EAZTO,EAadK,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAAKC,GAC5BL,EACJI,EAAI,CAACL,WAAUX,UAEfiB,EAAI,CAACN,WAAUX,S,KAjBpBkB,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUX,EAAKmB,EAALnB,MACTN,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANtB,EAAM,M,IAEtEuB,OAAM,SAAAJ,G,IAAGR,EAAQQ,EAARR,SAAUX,EAAKmB,EAALnB,MACVN,EAAA0B,OAAOI,QAAQ,sBAAqCF,OAAfX,EAAS,QAAYW,OAANtB,EAAM,M,MAE5DQ,EAAeC,EAAkBH,E,EAtBvCF,EAAIqB,iBACJ7B,EAAO8B,QAOP,IALA,IAAMlB,EAAeT,EAAWC,MAC5BS,EAAkBV,EAAWE,KAC3B0B,EAAa5B,EAAWG,OAGrB0B,EAAI,EAAGA,EAAID,EAAYC,GAAG,EAACC,EAAAD,E,IAftChC,EAAOO,iBAAiB,SAExB,SAAuBC,GACrBL,EAAWK,EAAI0B,OAAOC,MAAQC,OAAO5B,EAAI0B,OAAOG,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nconst formValues = {\n  delay: null,\n  step: null,\n  amount: null,\n}\n\nformEl.addEventListener('submit', startMassage);\nformEl.addEventListener('input', addFormValues);\n\nfunction addFormValues(evt) {\n  formValues[evt.target.name] = Number(evt.target.value);\n}\n\nfunction startMassage(evt) {\n  evt.preventDefault();\n  formEl.reset();\n\n  const firstTimeout = formValues.delay;\n  let intervalTimeout = formValues.step;\n  const amountStep = formValues.amount;\n  \n\n  for (let i = 0; i < amountStep; i+=1) {\n    let position = i + 1;\n    let delay = firstTimeout + intervalTimeout * i;\n  \n   \n    \nsetTimeout(() => {\ncreatePromise(position, delay)\n.then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n.catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n     }, firstTimeout + intervalTimeout * i);\n  }\n}\n  \n\nfunction createPromise(position, delay) { \n    const shouldResolve = Math.random() > 0.3;\n    const promise = new Promise((res, rej) => {\n      if (shouldResolve) {\n      res({position, delay});\n    } else {\n      rej({position, delay});\n    }\n  });\n    \n    return promise;\n  }"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$formValues","delay","step","amount","addEventListener","evt","position1","i","delay1","firstTimeout","intervalTimeout","setTimeout","position","shouldResolve","Math","random","Promise","res","rej","then","param","Notify","success","concat","catch","failure","preventDefault","reset","amountStep","i1","_loop","target","name","Number","value"],"version":3,"file":"03-promises.bdec8e77.js.map"}